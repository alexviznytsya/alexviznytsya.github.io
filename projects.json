[     {
      "name": "CTA Bus Tracker",
      "shortName": "",
      "previewLabel" : "CTA Bus Tracker",  
      "previewImage" : "img/projects/cta_bus_tracker/cta_bus_tracker_preview.jpg",      
      "carouselImages" : ["img/projects/cta_bus_tracker/cta_bus_tracker_1.jpg", "img/projects/cta_bus_tracker/cta_bus_tracker_2.jpg", "img/projects/cta_bus_tracker/cta_bus_tracker_3.jpg", "img/projects/cta_bus_tracker/cta_bus_tracker_4.jpg", "img/projects/cta_bus_tracker/cta_bus_tracker_5.jpg", "img/projects/cta_bus_tracker/cta_bus_tracker_6.jpg"],
      "description" : "This application provides live data of the CTA buses locations based on selected bus stop and bus number. Moreover, user can save his/her favorite bus stops for quick track, change radius of bus stop search based on his/her location, and change frequency of data update on Google Maps. This is PWA application and can be installed on users device and work offline (live data is not available without internet connection, search by bus number and street cossing only).",
      "details" : ["HTML5", "CSS3","Javascript", "Material Web Components", "JQuery", "Dexie.js", "Google Map API", "CTA Bus API", "Chicago Data Portal API", "Installable PWA"],
      "git_url" : "https://github.com/alexviznytsya/cta-bus-tracker", 
      "active" : 1
      },

      {
      "name": "Favorite Chicago Libraries",
      "shortName": "",
      "previewLabel" : "Chicago Libraries",  
      "previewImage" : "img/projects/chicago_libraries/chicago_libraries_preview.jpg",      
      "carouselImages" : ["img/projects/chicago_libraries/chicago_libraries_1.jpg", "img/projects/chicago_libraries/chicago_libraries_2.jpg", "img/projects/chicago_libraries/chicago_libraries_3.jpg", "img/projects/chicago_libraries/chicago_libraries_4.jpg"],
      "description" : "This application show the list of all Chicago Public Libraries. User can select any oh those, and they will be saved to IndexedDB. Also, user can find location of his/her favorites libraries and his/her location.",
      "details" : ["HTML5", "CSS3","Javascript", "Material Web Components", "JQuery", "Dexie.js", "Google Map API"],
      "git_url" : "https://github.com/alexviznytsya/chicago-libraries", 
      "active" : 0
      },

      {
      "name": "Aliens VS Pizza",
      "shortName": "",
      "previewLabel" : "Aliens VS Pizza",  
      "previewImage" : "img/projects/aliens_vs_pizza/aliens_vs_pizza_preview.jpg",      
      "carouselImages" : ["img/projects/aliens_vs_pizza/aliens_vs_pizza_1.jpg", "img/projects/aliens_vs_pizza/aliens_vs_pizza_2.jpg", "img/projects/aliens_vs_pizza/aliens_vs_pizza_3.jpg"],
      "description" : "This is Javascript scrolling game using canvas element to create animation. Small alien has to collect as mush as possible pizzas and omit dangerous meteorites. With every 3 pizzas game's difficulty become harder and game speed increases.",
      "details" : ["HTML5", "CSS3", "Javascript", "JQuery"],
      "git_url" : "https://github.com/alexviznytsya/aliens-vs-pizza", 
      "active" : 0
      },

      {
      "name": "Networked Chat",
      "shortName": "",
      "previewLabel" : "Networked Chat",
      "previewImage" : "img/projects/networked_chat/networked_chat_preview.jpg",
      "carouselImages" : ["img/projects/networked_chat/networked_chat_1.jpg", "img/projects/networked_chat/networked_chat_2.jpg", "img/projects/networked_chat/networked_chat_3.jpg", "img/projects/networked_chat/networked_chat_4.jpg", "img/projects/networked_chat/networked_chat_5.jpg", "img/projects/networked_chat/networked_chat_6.jpg", "img/projects/networked_chat/networked_chat_7.jpg"],
      "description" : "The purpose of this project is to allow users to send encrypted messages to each other over the network. This project is targeted at anyone that would like to send private messages over a network to other users. Two separate programs are required to make this work, the server and the client programs.  ",
      "details" : ["Java", "JDK 10", "Network", "Swing", "macOS"],
      "git_url" : "https://github.com/alexviznytsya/networked-chat",
      "active" : 0
      },

      {
      "name": "Networked Battleship",
      "shortName": "",
      "previewLabel" : "Networked Battleship",
      "previewImage" : "img/projects/networked_battleship/networked_battleship_preview.jpg",
      "carouselImages" : ["img/projects/networked_battleship/networked_battleship_1.jpg", "img/projects/networked_battleship/networked_battleship_2.jpg", "img/projects/networked_battleship/networked_battleship_3.jpg", "img/projects/networked_battleship/networked_battleship_4.jpg", "img/projects/networked_battleship/networked_battleship_5.jpg"],
      "description" : "Battleship (also Battleships or Sea Battle) is a guessing game for two players. It is played on ruled grids (over the network) on which each players fleet of ships (including battleships) are marked. The locations of the fleets are concealed from the other player. Players alternate turns calling 'shots' at the other player's ships, and the objective of the game is to destroy the opposing player's fleet.",
      "details" : ["Java", "JDK 10", "Network Multiplayer", "Swing", "macOS"],
      "git_url" : "https://github.com/alexviznytsya/networked-battleship",
      "active" : 0
      },

      {
      "name": "Sudoku Solver",
      "shortName": "",
      "previewLabel" : "Sudoku Solver",
      "previewImage" : "img/projects/sudoku_solver/sudoku_solver_preview.jpg",
      "carouselImages" : ["img/projects/sudoku_solver/sudoku_solver_1.jpg", "img/projects/sudoku_solver/sudoku_solver_2.jpg", "img/projects/sudoku_solver/sudoku_solver_3.jpg"],
      "description" : "Sudoku Solver is a GUI (Graphical User Interface) game that implements popular puzzle where player has to solve 9x9 grid. Additionally, this grid is divided into 9 smaller boxes. Game uses numbers 1 through 9, and each of these numbers can appear only once in a small box, and only once in the row or column in 9x9 grid. Player can load a board from the file and save current state to the file. Program has some algorithms that can be used to help solving the game using hints or even solve the entire board.",
      "details" : ["Java", "JDK 10", "Swing", "macOS"],
      "git_url" : "https://github.com/alexviznytsya/sudoku-solver",
      "active" : 0
      },

      {
      "name": "Fifteen Puzzle",
      "shortName": "",
      "previewLabel" : "Fifteen Puzzle",
      "previewImage" : "img/projects/fifteen_puzzle/fifteen_puzzle_preview.jpg",
      "carouselImages" : ["img/projects/fifteen_puzzle/fifteen_puzzle_1.jpg", "img/projects/fifteen_puzzle/fifteen_puzzle_2.jpg", "img/projects/fifteen_puzzle/fifteen_puzzle_3.jpg"],
      "description" : "The Fifteen Puzzle is one variation of the N-Puzzle. The Fifteen Puzzle was made famous by Sam Lloyd who in 1878. To solve the puzzle, a number that is next to the empty position is moved into the empty position. By 'next to', the number can be above, below, to the left or to the right of the empty position. The empty position will now occupy the grid position were the number had been.",
      "details" : ["Java", "JDK 10", "Swing", "macOS"],
      "git_url" : "https://github.com/alexviznytsya/fifteen-puzzle",
      "active" : 0
      },

      {
      "name": "CTA Ridership Analysis",
      "shortName": "",
      "previewLabel" : "Ridership Analysis ",
      "previewImage" : "img/projects/cta_ridership_analysis/cta_ridership_analysis_preview.jpg",
      "carouselImages" : ["img/projects/cta_ridership_analysis/cta_ridership_analysis_1.jpg", "img/projects/cta_ridership_analysis/cta_ridership_analysis_2.jpg", "img/projects/cta_ridership_analysis/cta_ridership_analysis_3.jpg"],
      "description" : "This project analyzes a database of ridership about Chicago’s CTA system. User has database of CTA data, and the user can investigate the stations and stops in the system, as well as ridership data. Also, the user has the ability to display the top-10 stations in terms of ridership.",
      "details" : ["C#", "SQL", "Windows 10"],
      "git_url" : "https://github.com/alexviznytsya/cta-ridership-analysis",
      "active" : 0
      },

      {
      "name": "pThreads and Synchronization",
      "shortName": "",
      "previewLabel" : "Thread Synchronization",  
      "previewImage" : "img/projects/pthreads_and_synchronization/pthreads_and_synchronization_preview.jpg",      
      "carouselImages" : ["img/projects/pthreads_and_synchronization/pthreads_and_synchronization_1.jpg", "img/projects/pthreads_and_synchronization/pthreads_and_synchronization_2.jpg", "img/projects/pthreads_and_synchronization/pthreads_and_synchronization_3.jpg"],
      "description" : "This application is a simulation in which a number of threads access a group of shared buffers for both reading and writing purposes. Initially this is done without the benefit of synchronization tools (semaphores) to illustrate the problems of race conditions, and then with the synchronization tools to solve the problems. Also separate mutex is used to coordinate writing to the screen.",
      "details" : ["C11", "pThreads", "Semaphores", "Synchronization", "macOS"],
      "git_url" : "https://github.com/alexviznytsya/pthreads-and-synchronization", 
      "active" : 0
      },

      {
      "name": "Console Mandelbrot Fractals Images",
      "shortName": "",
      "previewLabel" : "Mandelbrot Fractals",  
      "previewImage" : "img/projects/console_mandelbrot_fractal/console_mandelbrot_fractal_preview.jpg",      
      "carouselImages" : ["img/projects/console_mandelbrot_fractal/console_mandelbrot_fractal_3.jpg", "img/projects/console_mandelbrot_fractal/console_mandelbrot_fractal_2.jpg", "img/projects/console_mandelbrot_fractal/console_mandelbrot_fractal_1.jpg"],
      "description" : "This projects is collection of three programs that work together using inter-process communications to create, display, and store Mandelbrot fractal images. More specifically, the processes use fork / exec, pipes, message queues, shared memory, signals, and process exit codes to coordinate their efforts and communicate information.",
      "details" : ["C++11", "Inter-Process Communications", "I/O", "macOS"],
      "git_url" : "https://github.com/alexviznytsya/console-mandelbrot-fractal", 
      "active" : 0
      },

      {
      "name": "iClicker Analysis",
      "shortName": "",
      "previewLabel" : "iClicker Analysis",  
      "previewImage" : "img/projects/iclicker_analysis/iclicker_analysis_preview.jpg",      
      "carouselImages" : ["img/projects/iclicker_analysis/iclicker_analysis_1.jpg", "img/projects/iclicker_analysis/iclicker_analysis_2.jpg", "img/projects/iclicker_analysis/iclicker_analysis_3.jpg"],
      "description" : "This application uses as input iClicker data for miltiple class sessions from 'files.txt', and then analyze this data to see how many questions were given, how many students answered, how many students answered correctly, and so on. The input files are text file in XML format. Then, application waits for user input. It analyze entered iClicker ID, and shows all available statistics for that specific iClicker ID.",
      "details" : ["C++11", "XML", "Parsing", "macOS"],
      "git_url" : "https://github.com/alexviznytsya/iclicker-analysis", 
      "active" : 0
      },

      {
      "name": "Divvy Trip Analysis Using Graphs",
      "shortName": "",
      "previewLabel" : "Divvy Graph Analysys",  
      "previewImage" : "img/projects/divvy_graph_analysis/divvy_graph_analysis_preview.jpg",      
      "carouselImages" : ["img/projects/divvy_graph_analysis/divvy_graph_analysis_1.jpg", "img/projects/divvy_graph_analysis/divvy_graph_analysis_2.jpg", "img/projects/divvy_graph_analysis/divvy_graph_analysis_3.jpg"],
      "description" : "This project is based on Divvy AVL project. Program uses a graph to analyze trips between stations. User inputs Divvy station and trip data, program builds a graph of the # of trips between stations, and then interact with the user to support the following 5 commands:<br><ul><li>Info about a station.</li><li>Number of trips between 2 stations.</li></li>Breadth-First Search (BFS) from a station.</li><li>Debug.</li><li>Exit.</li></ul>",
      "details" : ["C++11", "CSV", "Graphs", "macOS"],
      "git_url" : "https://github.com/alexviznytsya/divvy-graph-analysis", 
      "active" : 0
      },

      {
      "name": "Divvy Trip Analysis Using AVL Tree",
      "shortName": "",
      "previewLabel" : "Divvy AVL Analysys",  
      "previewImage" : "img/projects/divvy_avl_analysis/divvy_avl_analysis_preview.jpg",      
      "carouselImages" : ["img/projects/divvy_avl_analysis/divvy_avl_analysis_1.jpg", "img/projects/divvy_avl_analysis/divvy_avl_analysis_2.jpg", "img/projects/divvy_avl_analysis/divvy_avl_analysis_3.jpg"],
      "description" : "Divvy is a well-known Chicago. This program takes Divvy stations and trips data as input, and then interact with the user to support the following six commands: <br>1. Statistics about the AVL trees <br>2. Station info <br>3. Trip info <br>4. Bike info <br>5. Find stations nearby <br>6. Route analysis.",
      "details" : ["C11", "CSV", "AVL Tree", "macOS"],
      "git_url" : "https://github.com/alexviznytsya/divvy-avl-analysis", 
      "active" : 0
      },

      {
      "name": "Autocomplete Movie Search Using BST",
      "shortName": "",
      "previewLabel" : "Autocomplete BST",  
      "previewImage" : "img/projects/autocomplete_movie_data_bst/autocomplete_movie_data_bst_preview.jpg",      
      "carouselImages" : ["img/projects/autocomplete_movie_data_bst/autocomplete_movie_data_bst_1.jpg", "img/projects/autocomplete_movie_data_bst/autocomplete_movie_data_bst_2.jpg", "img/projects/autocomplete_movie_data_bst/autocomplete_movie_data_bst_3.jpg"],
      "description" : "This application implements “auto-complete”. This is a feature we use every day, where we enter a partially complete piece of text and the system suggests various ways to complete. User enters text file name, and program automatically builds binary tree with movie rating as a key. Search is very fast and takes only O(logN) time to find or suggest matching movies.",
      "details" : ["C11", "Binary Search Tree", "macOS"],
      "git_url" : "https://github.com/alexviznytsya/autocomplete-movie-data-bst", 
      "active" : 0
      },

	{
      "name": "Netflix Movie Data Using BST",
      "shortName": "",
      "previewLabel" : "Movie Data BST",  
      "previewImage" : "img/projects/search_movie_bst/search_movie_bst_preview.jpg",	
      "carouselImages" : ["img/projects/search_movie_bst/search_movie_bst_1.jpg", "img/projects/search_movie_bst/search_movie_bst_2.jpg"],
      "description" : "This program takes input as Netflix movie data, store the data in a binary search tree (using the movie id as the key), and then search for a movie id entered by the user. As the program visits nodes during the search, the movie id and name stored in each node is output. The program then outputs the movie id and name if found in the tree, otherwise a “not found” message is output.",
      "details" : ["C11", "CSV", "Binary Search Tree", "macOS"],
      "git_url" : "https://github.com/alexviznytsya/search-movie-bst", 
      "active" : 0
	}
]